// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240426120646_FixBadRelationCard-Container")]
    partial class FixBadRelationCardContainer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CardContainer", b =>
                {
                    b.Property<long>("CardsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContainersId")
                        .HasColumnType("bigint");

                    b.HasKey("CardsId", "ContainersId");

                    b.HasIndex("ContainersId");

                    b.ToTable("CardContainer");
                });

            modelBuilder.Entity("Models.Entities.Box", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AddedForStudyDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CollectionId")
                        .HasColumnType("bigint");

                    b.Property<long>("LastReviewedCardId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastReviewedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastReviewedSlot")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("Boxes");
                });

            modelBuilder.Entity("Models.Entities.Card", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ask")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CollectionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasMp3")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Models.Entities.Collection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("Models.Entities.Container", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("SlotId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SlotId");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("Models.Entities.Slot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BoxId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BoxId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("CardContainer", b =>
                {
                    b.HasOne("Models.Entities.Card", null)
                        .WithMany()
                        .HasForeignKey("CardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Container", null)
                        .WithMany()
                        .HasForeignKey("ContainersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Box", b =>
                {
                    b.HasOne("Models.Entities.Collection", "Collection")
                        .WithMany("Boxes")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Models.Entities.Card", b =>
                {
                    b.HasOne("Models.Entities.Collection", "Collection")
                        .WithMany("Cards")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Models.Entities.Container", b =>
                {
                    b.HasOne("Models.Entities.Slot", "Slot")
                        .WithMany("Containers")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Models.Entities.Slot", b =>
                {
                    b.HasOne("Models.Entities.Box", "Box")
                        .WithMany("Slots")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Box");
                });

            modelBuilder.Entity("Models.Entities.Box", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("Models.Entities.Collection", b =>
                {
                    b.Navigation("Boxes");

                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Models.Entities.Slot", b =>
                {
                    b.Navigation("Containers");
                });
#pragma warning restore 612, 618
        }
    }
}
