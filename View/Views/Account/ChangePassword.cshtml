@using ModelsLeit.ViewModels.User
@model UserChangePasswordLimitedViewModel

@{
    ViewData["Title"] = "Change Password";
}

<h1>@ViewData["Title"]</h1>
<p>
    @foreach (var item in TempData)
    {
        @(item.Value is null or 0 ? string.Empty : Html.Raw($"{item.Value}<br />"))
    }
</p>

<form asp-action="ChangePassword">
    <div asp-validation-summary="All" class="text-danger"></div>
    <input asp-for="Id" class="form-control" type="hidden" value="@(ViewData["userId"]??Model.Id)" />

    <h3>Account:</h3>
    <div class="form-group w-50 float-start pe-2">
        <label asp-for="Password" class="control-label"></label>
        <input asp-for="Password" class="form-control" />
        <span asp-validation-for="Password" class="text-danger"></span>
    </div>
    <div class="form-group w-50 float-end ps-2">
        <label asp-for="NewPassword" class="control-label"></label>
        <input asp-for="NewPassword" class="form-control" />
        <span asp-validation-for="NewPassword" class="text-danger"></span>
    </div>
    <div class="form-group float-start w-100">
        <br />
        <br />
        <input type="submit" value="Save" class="btn btn-primary" />
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}